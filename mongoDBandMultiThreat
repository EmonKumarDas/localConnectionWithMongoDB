const cluster = require('cluster');
const http = require('http');
const numCPUs = require('os').cpus().length;

if (cluster.isMaster) {
  // Create a worker for each CPU core
  for (let i = 0; i < numCPUs; i++) {
    cluster.fork();
  }

  cluster.on('exit', (worker, code, signal) => {
    console.log(`Worker ${worker.process.pid} died`);
  });
} else {
  const express = require('express');
  const app = express();
  const MongoClient = require('mongodb').MongoClient;

  const url = 'mongodb://localhost:27017'; // Replace with your MongoDB connection URL
  const dbName = 'your-database-name'; // Replace with your database name

  MongoClient.connect(url, { useNewUrlParser: true, useUnifiedTopology: true }, (err, client) => {
    if (err) {
      console.error('Error connecting to MongoDB:', err);
      return;
    }

    const db = client.db(dbName);
    const ProductCollection = db.collection('products'); // Replace with your collection name

    app.get('/getProducts/', (req, res) => {
      try {
        ProductCollection.find({}).sort({ _id: -1 }).toArray((err, result) => {
          if (err) {
            console.error('Error fetching data:', err);
            res.status(500).send('Internal Server Error');
          } else {
            res.send(result);
          }
        });
      } catch (error) {
        console.error('Error:', error);
        res.status(500).send('Internal Server Error');
      }
    });

    const server = http.createServer(app);
    server.listen(3000, () => {
      console.log(`Worker ${process.pid} is listening on port 3000`);
    });
  });
}
